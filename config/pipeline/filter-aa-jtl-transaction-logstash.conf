filter {

  #parse Transaction

  ruby {
    code => "
            regex = event.get('[@metadata][transaction_regex]')
            if (regex.to_java().isEmpty() )
               event.set('transaction', 'false')
            else
               patern = java::util::regex::Pattern.compile(regex)
               if patern.match(event.get('label'))
                   event.set('transaction', 'true')
               else
                   event.set('transaction', 'false')
               end
            end
    "
    tag_on_exception => "_rubyexception_transaction"
  }

  if [@metadata][transaction_auto] == "true" {
    if [URL] == "null" {
      if [responseMessage]  =~ /^Number of samples in transaction (.)+/ {
        mutate {
          replace => {
            "transaction" => "true"
          }
        }
      }
    }
  }


  if [transaction] == "true" {

    if [@metadata][remove_transaction] == "false" {
      #parse transaction Message
      if [responseMessage] {

        grok {
          match => {
            "responseMessage" => ['\ANumber of samples in transaction : %{INT:transactionTotalSampler}, number of failing samples : %{INT:transactionFailingSampler}\Z']
          }
          tag_on_failure => ["_grokparsefailure","_grokparsefailure_Transaction"]

        }

        mutate {
          convert => {
            "transactionTotalSampler" => "integer"
            "transactionFailingSampler" => "integer"
          }
        }

      }
    }
    else {
      drop {
      }
    }
  }
  else {
    if [@metadata][remove_sampler] != "false" {
      drop {
      }
    }
  }


  mutate {
    convert => {
      "transaction" => "boolean"
    }
  }






}