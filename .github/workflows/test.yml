# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        logstash-version: [7.17.6, 8.1.3 , 8.2.3, 8.3.3, 8.4.2]

    env:
      PATH_OUT: build/out
      PATH_IN: testing/file/in
      PATH_EXPECTED: testing/file/expected

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # printenv
      - name: printenv
        run: printenv

      # PWD
      - name: PWD
        run: pwd

      # install jq
      - name: apt jq
        run: sudo apt-get install -y jq

      # Runs a set of commands using the runners shell
      - name: prepare build folders
        run: |
          mkdir build
          cp -r config build
          cp -r testing/config/* build/config/
          rm build/config/pipeline/output-elastic-logstash.conf
          mkdir $PATH_OUT
          chmod +777 $PATH_OUT
          ls -lah build/config/pipeline
          cp -r docker/elasticsearch build
          ls -lah build
          docker build -f build/elasticsearch/Dockerfile -t jmeter-logstash-elastic build
       # Run docker
      - name: Run docker
        run: |
          docker run --rm -e "FILE_READ_MODE=read" \
          -e "FILE_START_POSITION=beginning" \
          -e "FILE_EXIT_AFTER_READ=true" \
          -v ${PWD}/$PATH_OUT:/output/ \
          -v ${PWD}/build/config/settings/logstash.yml:/usr/share/logstash/config/logstash.yml jmeter-logstash-elastic

      - name: check Expected Files list
        run: |
         
          for filepath in $PATH_EXPECTED/*.json; do
                 FILE_NAME=${filepath##*/}
                 echo "####START###############################$FILE_NAME#####################################"
                 EXPECTED_FILE=$PATH_EXPECTED/$FILE_NAME
                 OUT_FILE=$PATH_OUT/$FILE_NAME
                 echo "####OUT###############$FILE_NAME#####################"
                 jq --sort-keys 'del(.host) | del(."@timestamp")'  $OUT_FILE
                 echo "####OUT###############$FILE_NAME#####################"
                 echo "####EXPECTED##########$FILE_NAME#####################"
                 jq --sort-keys 'del(.host) | del(."@timestamp")'  $EXPECTED_FILE
                 echo "####EXPECTED##########$FILE_NAME#####################"
                 diff <(jq --sort-keys 'del(.host) | del(."@timestamp")' $EXPECTED_FILE) <(jq --sort-keys 'del(.host) | del(."@timestamp")' $OUT_FILE)
                 echo "####END###############################$FILE_NAME#####################################"
          done

 


